---
# Copyright (c) Chris Ruettimann <chris@bitbull.ch>

# This software is licensed to you under the GNU General Public License.
# There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/gpl.txt

- name: VCSA SFTP Backup
  hosts: localhost
  vars:
    vc_address: 'vcenter01.domain.local'            # vCenter API address
    vc_user: '{{ ansible_user }}@domain.local'      # vcenter creds
    vc_password: '{{ ansible_password }}'           # vcenter creds
    backup_server_ip: "1.2.3.4"                     # ip of sftp target, vcenter dns sometimes does not work properly
    backup_server: "filebackup01"                   # sftp target: inventory_hostname
    backup_user: 'vcenter01'                        # sftp target
    backup_folder: "/srv/backup/{{ backup_user }}"  # where to store on sftp target
    backup_keep: 3                                  # delete backups on sftp target
    backup_min_size_mb: 500                         # fail if backup size is lower on sftp target
  tasks:
    - name: Generate new random password for vcenter backup transfer user
      set_fact:
        backup_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_lowercase,digits,,.:-_=+;<>') }}"

    - name: create backup user {{ backup_user }} on server {{ backup_server }}
      user:
        name: "{{ backup_user }}"
        home: "{{ backup_folder }}"
        comment: vCenterBackup
        update_password: always
        password: "{{ backup_password | password_hash('sha512') }}"
        password_lock: False
        shell: /bin/bash
      delegate_to: "{{ backup_server }}"
      become: True
      vars:
        ansible_connection: ssh

    - name: Create date pattern
      set_fact:
        mydate: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"

    - name: Create Backup Folder
      file:
        path: "{{ backup_folder }}/{{ mydate }}"
        state: directory
      delegate_to: "{{ backup_server }}"
      become: True
      vars:
        ansible_connection: ssh
        ansible_become_user: "{{ backup_user }}"

    - name: Authenticate with VCSA
      uri:
        url: "https://{{ vc_address }}/rest/com/vmware/cis/session"
        method: POST
        validate_certs: no
        force_basic_auth: yes
        user: "{{ vc_user }}"
        password: "{{ vc_password }}"
        return_content: yes
      register: login

    - name: Create a message body for the backup request
      copy:
        dest: "/tmp/task.json"
        content: |
          {
            "piece":
              {
                "location_type": "SFTP",
                "comment": "Ansible backup",
                "parts": ["seat", "common"],
                "location": "sftp://{{ backup_server_ip }}{{ backup_folder }}/{{ mydate }}",
                "location_user": "{{ backup_user }}",
                "location_password": "{{ backup_password }}"
              }
          }

    - name: Issue a request to start the backup operation
      uri:
        url: "https://{{ vc_address }}/rest/appliance/recovery/backup/job"
        method: POST
        validate_certs: no
        headers:
          vmware-api-session-id: "{{ login.json.value }}"
          Accept: "application/json"
          Content-Type: "application/json"
        body: "{{ lookup('file', '/tmp/task.json') }}"
        body_format: json
        status_code: 200
      register: backup_response

    - name: Monitor progress of the backup operation
      uri:
        url: "https://{{ vc_address }}/rest/appliance/recovery/backup/job/{{ backup_response.json.value.id }}"
        method: GET
        validate_certs: no
        headers:
          vmware-api-session-id: "{{ login.json.value }}"
          Accept: "application/json"
        return_content: yes
      register: progress_response
      until: progress_response.json.value.state != "INPROGRESS" 
      retries: 30
      delay: 30

    - name: Fail if final state is not SUCCEEDED
      fail:
        msg: "Final backup state mus be SUCCEEDED, but it is {{ progress_response.json.value.state }}"
      when: progress_response.json.value.state != "SUCCEEDED" 

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/task.json"

    - name: Look into backup folder to validate backup by size
      find:
        paths: "{{ backup_folder }}/{{ mydate }}"
        file_type: file
        recurse: yes
      register: files_found
      delegate_to: "{{ backup_server }}"
      become: True
      vars:
        ansible_connection: ssh
        ansible_become_user: "{{ backup_user }}"

    - name: Calculate total size of files
      set_fact:
        total_size: "{{ files_found.files | map(attribute='size') |  map('int') | sum }}"

    - name: Fail if total size is less than {{ backup_min_size_mb }} MB
      fail:
        msg: "The total size is less than {{ backup_min_size_mb }} MB"
      when: total_size | int < (backup_min_size_mb | int * 1024 * 1024)

    - name: Remove old backups if needed
      shell: |
        echo "INFO: Show current backup folders:"
        du -hs {{ backup_folder }}/*-*-*-*-*
        echo "WARN: Remove old backups:"
        ls -1d {{ backup_folder }}/*-*-*-*-* | sort -n | head -n-{{ backup_keep }} | xargs -r rm -frv
      register: cleanup_output
      changed_when: cleanup_output.stdout != ""
      delegate_to: "{{ backup_server }}"
      become: True
      vars:
        ansible_connection: ssh
        ansible_become_user: "{{ backup_user }}"

    - name: lock backup user {{ backup_user }} on server {{ backup_server }}
      user:
        name: "{{ backup_user }}"
        password_lock: True
        shell: /bin/false
      delegate_to: "{{ backup_server }}"
      become: True
      vars:
        ansible_connection: ssh

    - name: print cleanup output
      debug:
        var: cleanup_output.stdout_lines
